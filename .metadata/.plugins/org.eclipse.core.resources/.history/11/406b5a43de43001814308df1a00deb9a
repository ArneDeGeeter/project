package vibration.EJB;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Base64;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.ejb.EJB;
import javax.ejb.SessionContext;
import javax.ejb.Stateless;
import javax.faces.application.FacesMessage;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;

import com.sun.media.jfxmedia.logging.Logger;

import vibration.JPA.Personen;

@Stateless
public class Logincase implements LogincaseLocal {

	@PersistenceContext(unitName = "VibreJPA")
	private EntityManager em;

	@Resource
	private SessionContext ctx;

	@EJB
	private UserManagementEJBLocal userEJB;

	public Logincase() {
		throw new UnsupportedOperationException();
	}

	String token;
	private String selectPersonEmail="SELECT p FROM Personen p WHERE p.email = :email";
	private String email="email";
	@Override
	public Personen findUser(String login) {
		Query q = em.createQuery(selectPersonEmail);
		q.setParameter(email, login);
		List<Personen> personen = q.getResultList();
		if (personen.size() == 1)
			return personen.get(0);
		else
			return null;
	}


	@Override
	public void loginGlassfish(String email, String wachtwoord) {
		FacesContext context = FacesContext.getCurrentInstance();
		ExternalContext externalContext = context.getExternalContext();
		HttpServletRequest request = (HttpServletRequest) externalContext.getRequest();
		try {
			request.login(email, wachtwoord);
			Personen persoon = userEJB.findPerson(email);
			externalContext.getSessionMap().put("Persoon", persoon);
			externalContext.getSessionMap().put("id", persoon.getIdpersonen());
			externalContext.redirect("/VibreWeb/index.xhtml");
		} catch (ServletException | IOException e) {
			// Handle unknown username/password in request.login().
			context.addMessage(null, new FacesMessage("Unknown login"));
		}
	}

	@Override
	public boolean loginCheck() {
		String login = ctx.getCallerPrincipal().getName();
		return login.equals("ANONYMOUS");
	}

	@Override
	public String returnName(Personen persoon) {
		Personen p;
		if (persoon == null) {
			String login = ctx.getCallerPrincipal().getName();
			Query q = em.createQuery(selectPersonEmail);
			q.setParameter(email, login);
			List<Personen> personen = q.getResultList();
			if (personen.size() == 1) {
				p = personen.get(0);
			} else
				p = null;

		} else {
			p = persoon;
		}

		Query q = em.createQuery("SELECT p FROM Personen p WHERE p.idpersonen = :idpersonen");
		q.setParameter("idpersonen", p);
		List<Personen> persoonsNaam = q.getResultList();
		return persoonsNaam.get(0).getNaam();
	}

	@Override
	public void registerUser(String voornaam, String naam, String wachtwoord, String email, String school, String bio) {
		FacesContext context = FacesContext.getCurrentInstance();
		ExternalContext externalContext = context.getExternalContext();

		String hashedPass = createHash(wachtwoord);
		if (hashedPass == null) {
			try {
				externalContext.redirect("/VibreWeb/error/registerError.xhtml");
			} catch (IOException e) {
				// TODO Auto-generated catch block
				Logger.logMsg(1, e.toString());
			}
		} else {
			Personen p = new Personen(naam, hashedPass, email, school, "Spotter");
			p.setBio(bio);
			p.setVoornaam(voornaam);
			p.setDate(new Date());
			em.joinTransaction();
			em.persist(p);
			try {
				externalContext.redirect("/VibreWeb/registerSucces.xhtml");
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}

	}

	@Override
	public String createHash(String pass) {
		MessageDigest digest;
		try {
			digest = MessageDigest.getInstance("SHA-256");
			byte[] hashb = digest.digest(pass.getBytes(StandardCharsets.UTF_8));
			return Base64.getEncoder().encodeToString(hashb);
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
		}
		return null;
	}


	@Override
	public String loginUser(String email) {
		return null;
	}


}
