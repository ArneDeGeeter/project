package vibration.EJB;

import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.ejb.SessionContext;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

import vibration.JPA.Experimenten;
import vibration.JPA.Foto;
import vibration.JPA.Meting;
import vibration.JPA.Personen;
import vibration.JPA.Project;

/**
 * Session Bean implementation class UserManagementEJB
 */
@Stateless
public class UserManagementEJB implements UserManagementEJBLocal {

	/**
	 * Default constructor.
	 */
	@PersistenceContext(unitName = "VibreJPA")
	private EntityManager em;

	@Resource
	private SessionContext ctx;

	private boolean experiment = false;
	private boolean project = false;

	public UserManagementEJB() {
		// TODO Auto-generated constructor stub
	}

	@Override
	public Project findProject(int i) {
		Query q = em.createQuery("SELECT p FROM Project p WHERE p.id = :id");
		q.setParameter("id", i);
		List<Project> project = q.getResultList();
		if (project.size() == 1) {
			System.out.println("check");
			return project.get(0);
		}
		System.out.println("fail");
		return null;

	}

	@Override
	public List<Project> findProjects(Personen p) {

		/*
		 * Personen p2; if(p == null) { String login =
		 * ctx.getCallerPrincipal().getName(); p2 = findUser(login); }else{ p2 =
		 * p; } System.out.println(p2); System.out.println("test2");
		 */
		Query q = em.createQuery(
				"SELECT p FROM Project p"/* WHERE p.personen = :idpers" */);
		// q.setParameter("idpers", p2);
		List<Project> project = q.getResultList();
		return project;
	}

	public List<Project> findUserProjects(Personen persoon) {
		Personen p;
		if (persoon == null) {
			String login = ctx.getCallerPrincipal().getName();
			p = findPerson(login);
		} else {
			p = persoon;
		}
		System.out.println(p.getIdpersonen());
		Query q = em.createQuery("SELECT p FROM Project p WHERE p.personen.idpersonen = :idpers");
		q.setParameter("idpers", p.getIdpersonen());
		return q.getResultList();
	}

	public String currentUser() {
		String login = ctx.getCallerPrincipal().getName();
		Personen p = findPerson(login);
		if (p == null) {
			return "Niet ingelogd";
		}
		return p.getNaam();
	}

	public String userPage() {
		String login = ctx.getCallerPrincipal().getName();
		System.out.println(login);
		Personen p = findPerson(login);
		System.out.println(p == null);
		if (p == null) {
			return "login.faces?faces-redirect=true";
		} else if (p.getRol().equals("Spotter")) {
			return "/spotter/profielpagina.faces?faces-redirect=true";
		} else if (p.getRol().equals("Admin")) {
			return "/admin/profielpagina.faces?faces-redirect=true";
		}
		return p.getNaam();
	}

	@Override
	public List<Experimenten> findExperiment(Project p) {
		Query q = em.createQuery("SELECT e FROM Experimenten e WHERE e.project.id= :project");
		q.setParameter("project", p.getId());
		List<Experimenten> experimenten = q.getResultList();
		System.out.println(experimenten.size());
		return experimenten;
	}

	public Experimenten findExperiment(int id) {
		Query q = em.createQuery("SELECT e FROM Experimenten e WHERE e.id= :exp");
		q.setParameter("exp", id);
		List<Experimenten> experimenten = q.getResultList();
		if (experimenten.size() == 1) {
			return experimenten.get(0);
		}

		else {
			return null;
		}
	}

	public void uploadenFoto(byte[] fotos, String naam, int id, int id2) {
		Project p = findProject(id);
		Experimenten e = findExperiment(id2);
		Foto foto = new Foto(fotos, naam, e, p);
		em.joinTransaction();
		em.persist(foto);
	}

	@SuppressWarnings("unchecked")
	public List<Foto> fotoOphalen(int id) {
		Query q = null;
		if (experiment) {
			q = em.createQuery("SELECT f FROM Foto f WHERE f.experimenten.id = :id ");
			q.setParameter("id", id);

		} else if (project) {
			q = em.createQuery("SELECT f FROM Foto f WHERE f.project.id = :id ");
			q.setParameter("id", id);
		}
		return q.getResultList();

	}

	public Foto vindFoto(int id) {
		return em.find(Foto.class, id);
	}

	public String getLocation() {
		return "{lat: -25.363, lng: 131.044};";

	}

	public Personen geefPersoon(int id) {
		Query q = em.createQuery("SELECT f FROM Personen f WHERE f.idpersonen = :id ");
		q.setParameter("id", id);
		List<Personen> pl = q.getResultList();
		Personen p = pl.get(0);

		return p;
	}

	public void updatePersoon(String login, String email, String school, String rol, Personen person) {

		person.setNaam(login);
		person.setEmail(email);
		person.setRol(rol);
		person.setSchool(school);
		System.out.println("Alles geset");

		em.merge(person);
	}
	@Override
	public Meting findMeting(int i) {
		Query q = em.createQuery("SELECT f FROM meting f Where f.experimenten.id = :idex");
	return (Meting) q.getResultList().get(0);

	}

	public boolean isExperiment() {
		return experiment;
	}

	public List<Project> zoekProjecten(String projectZoekNaam) {
		Query q = em.createQuery(
				"SELECT f FROM Project f WHERE f.titel LIKE '%" + projectZoekNaam + "%' AND f.public_ = TRUE");
		System.out.println("Returning results...");
		return q.getResultList();

	}

	public List<Project> findUserPublicProjects(int idpersonen) {

		Query q = em.createQuery("SELECT p FROM Project p WHERE p.personen.idpersonen = :idpers AND p.public_ = TRUE");
		q.setParameter("idpers", idpersonen);
		return q.getResultList();

	}

	public String getGebruikersnaam(int idpersonen) {
		Query q = em.createQuery("SELECT f FROM Personen f WHERE f.idpersonen = :id ");
		q.setParameter("id", idpersonen);
		List<Personen> pl = q.getResultList();
		return pl.get(0).getNaam();

	}

	public List<Personen> zoekGebruikers(String userZoekNaam) {
		Query q = em.createQuery("SELECT f FROM Personen f WHERE f.naam LIKE '%" + userZoekNaam + "%'");
		System.out.println("Returning results...");
		return q.getResultList();

	}

	public void setExperiment(boolean experiment) {
		this.experiment = experiment;
	}

	public boolean isProject() {
		return project;
	}

	public void setProject(boolean project) {
		this.project = project;
	}

	@Override
	public Personen findPerson(int id) {
		return em.find(Personen.class, id);
	}

	public void addMeting(Meting m) {
		em.joinTransaction();
		em.persist(m);
	}

	@Override
	public Personen findPerson(String email) {

		Query q = em.createQuery("SELECT p FROM Personen p WHERE p.email= :email");
		q.setParameter("email", email);
		List<Personen> persons = q.getResultList();

		if (persons.size() == 1)
			return persons.get(0);
		else
			return null;
	}

	@Override
	public void addExperiment(Experimenten e) {
		em.joinTransaction();
		em.persist(e);
	}

	@Override
	public void addProject(Project p) {
		em.joinTransaction();
		em.persist(p);
	}

	@Override
	public void updateProjectMetExperiment(Project p) {
		/*
		 * Query q = em.
		 * createQuery("UPDATE Project SET ContactName = 'Alfred Schmidt', City= 'Frankfurt' WHERE CustomerID = 1;"
		 * ); List<Project> project = q.getResultList(); q.executeUpdate()
		 * 
		 * em.persist(p);
		 */
	}

	@Override
	public void addMetingExperiment(Meting meting, Experimenten e) {
		em.joinTransaction();
		e.setDate(new Date((e.getDate().getTime() / 1000) * 1000));
		em.persist(e);

		Query q = em.createQuery("SELECT e FROM Experimenten e");

		List<Experimenten> e2 = q.getResultList();
		for (int i = 0; i < e2.size(); i++) {
			if (e2.get(i).getDate().toString().equals(e.getDate().toString())) {
				meting.setExperimenten(e2.get(i));
				i = e2.size();
			}
		}
		em.persist(meting);

	}

	@Override
	public void uploadenFoto(byte[] fotos, String naam) {
		// TODO Auto-generated method stub

	}

	@Override
	public String createHash(String pass) {
		String hash = null;
		MessageDigest digest;
		try {
			digest = MessageDigest.getInstance("SHA-256");
			byte[] hashb = digest.digest(pass.getBytes(StandardCharsets.UTF_8));
			hash = Base64.getEncoder().encodeToString(hashb);
			System.out.println(hash);
		} catch (NoSuchAlgorithmException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return hash;

	}

}
