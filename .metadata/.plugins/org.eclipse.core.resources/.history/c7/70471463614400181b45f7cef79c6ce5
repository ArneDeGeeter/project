package vibration.JSF;

import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import javax.ejb.EJB;
import javax.faces.view.ViewScoped;
import javax.inject.Named;

import org.primefaces.model.chart.Axis;
import org.primefaces.model.chart.AxisType;
import org.primefaces.model.chart.LineChartModel;
import org.primefaces.model.chart.LineChartSeries;

import vibration.EJB.MetingEJBLocal;
import vibration.JPA.Experimenten;
import vibration.JPA.Meting;

@Named
@ViewScoped
public class MetingController implements Serializable {

	private static final long serialVersionUID = -4990170456504942443L;

	@EJB
	private MetingEJBLocal metingEJB;

	private LineChartModel metingChart1;
	private LineChartModel metingChart2;
	private LineChartModel metingChart3;
	private float minY1 = Integer.MAX_VALUE;
	private float maxY1 = Integer.MIN_VALUE;
	private ArrayList<Float> minY = new ArrayList<>();
	private ArrayList<Float> maxY = new ArrayList<>();
	private ArrayList<Integer> maxT = new ArrayList<>();
	private Experimenten experiment = new Experimenten();
	private String serie1 = "Series 1";
	private String serie2 = "Series 2";
	private String serie3 = "Series 3";

	public LineChartModel getMetingChart1() {
		return metingChart1;
	}

	public void setMetingChart1(LineChartModel metingChart) {
		this.metingChart1 = metingChart;
	}

	public LineChartModel getMetingChart3() {
		return metingChart3;
	}

	public void setMetingChart3(LineChartModel metingChart) {
		this.metingChart1 = metingChart;
	}

	public boolean geefMetingchart1() {
		return !metingEJB.checkSTEM(experiment);
	}

	public void createLineModel() throws IOException {
		Meting[] metingenLijst = new Meting[3];
		initArray(minY,Integer.MAX_VALUE,3);
		initArray(maxY,Integer.MIN_VALUE,3);
		
		experiment = metingEJB.findExperiment(experiment.getId());
		if (experiment != null) {

			if (!experiment.getMetings().isEmpty()) {

				metingenLijst[experiment.getMetings().get(0).getType()] = experiment.getMetings().get(0);
				metingenLijst[experiment.getMetings().get(1).getType()] = experiment.getMetings().get(1);
				metingenLijst[experiment.getMetings().get(2).getType()] = experiment.getMetings().get(2);
			}

			metingChart1 = initLinearModel(metingenLijst[1],0);
			metingChart1.setTitle("Frequentie grafiek");
			metingChart1.setLegendPosition("e");
			Axis yAxis = metingChart1.getAxis(AxisType.Y);
			yAxis.setMin(minY.get(0));
			yAxis.setMax(maxY.get(0));
			Axis xAxis = metingChart1.getAxis(AxisType.X);
			xAxis.setMin(0);
			xAxis.setMax(maxT.get(0));
			metingChart2 = initLinearModel(metingenLijst[0],1);
			metingChart2.setTitle("Gemeten waarden met smartphone");
			metingChart2.setLegendPosition("e");
			Axis yAxis2 = metingChart2.getAxis(AxisType.Y);
			yAxis2.setMin(minY.get(1));
			yAxis2.setMax(maxY.get(1));
			Axis xAxis2 = metingChart2.getAxis(AxisType.X);
			xAxis2.setMin(0);
			xAxis2.setMax(maxT.get(1));
			metingChart3 = initLinearModel(metingenLijst[2],2);
			metingChart3.setTitle("Geresampelde en gefilterde data");
			metingChart3.setLegendPosition("e");
			Axis yAxis3 = metingChart3.getAxis(AxisType.Y);
			yAxis3.setMin(minY.get(2));
			yAxis3.setMax(maxY.get(2));
			Axis xAxis3 = metingChart3.getAxis(AxisType.X);
			xAxis3.setMin(0);
			xAxis3.setMax(maxT.get(2));
		}
	}

	private void initArray(ArrayList<Float> minY4, int value, int amount) {
		minY4.clear();
		for (int i = 0; i < amount; i++) {
			minY4.add((float) value);
		}
	}

	private LineChartModel initLinearModel(Meting meting,int number) throws IOException {
		LineChartModel model = new LineChartModel();
		Map<Object, Number> x = new HashMap<>();
		Map<Object, Number> y = new HashMap<>();
		Map<Object, Number> z = new HashMap<>();
		x.put(0, 1);
		y.put(0, 1);
		z.put(0, 1);

		if (checkInput(experiment, number, meting)) {

			byte[] bufferx = meting.getX();
			byte[] buffery = meting.getY();
			byte[] bufferz = meting.getZ();
			byte[] buffert = meting.getTijd();
			DataInputStream dsx = new DataInputStream(new ByteArrayInputStream(bufferx));
			DataInputStream dsy = new DataInputStream(new ByteArrayInputStream(buffery));
			DataInputStream dsz = new DataInputStream(new ByteArrayInputStream(bufferz));
			DataInputStream dst = new DataInputStream(new ByteArrayInputStream(buffert));
			ArrayList<Float> flx = new ArrayList<>();
			ArrayList<Float> fly = new ArrayList<>();
			ArrayList<Float> flz = new ArrayList<>();
			ArrayList<Float> flt = new ArrayList<>();
			for (int i = 0; i < bufferx.length / 4; i++) {
				flx.add(dsx.readFloat());
				fly.add(dsy.readFloat());
				flz.add(dsz.readFloat());
				flt.add(dst.readFloat());
				minY.set(number, Math.min(Math.min(minY.get(number), flx.get(i)), Math.min(fly.get(i), flz.get(i))));
				maxY.set(number, Math.max(Math.max(maxY.get(number), flx.get(i)), Math.max(fly.get(i), flz.get(i))));
				x.put(flt.get(i), flx.get(i));
				y.put(flt.get(i), fly.get(i));
				z.put(flt.get(i), flz.get(i));
			}
			maxT.set(number,  (int) Math.ceil(flt.get(flt.size() - 1)));
		}
		LineChartSeries series1 = new LineChartSeries();
		series1.setLabel(serie1);

		LineChartSeries series2 = new LineChartSeries();
		series2.setLabel(serie2);

		LineChartSeries series3 = new LineChartSeries();
		series3.setLabel(serie3);

		series1.setData(x);
		series1.setShowMarker(false);
		series2.setData(y);
		series2.setShowMarker(false);
		series3.setData(z);
		series3.setShowMarker(false);

		model.addSeries(series1);
		model.addSeries(series2);
		model.addSeries(series3);

		return model;
	}


	private boolean checkInput(Experimenten experiment2, int i, Meting meting) {
		return (experiment2 != null & experiment2.getMetings().size() == i && meting != null && meting.getX() != null
				&& meting.getY() != null && meting.getZ() != null);
	}


	public Experimenten getExperiment() {
		return experiment;
	}

	public void setExperiment(Experimenten experiment) {
		this.experiment = experiment;
	}

	public String toonOpmerking() {
		if (experiment != null) {
			return metingEJB.geefOpmerking(experiment.getId());
		}
		return "";
	}

	public LineChartModel getMetingChart2() {
		return metingChart2;
	}

	public void setMetingChart2(LineChartModel metingChart2) {
		this.metingChart2 = metingChart2;
	}

	public void testMeting() {
		if (experiment.getDate() == null) {
			experiment = metingEJB.findExperiment(experiment.getId());
		}
		Meting meting = experiment.getMetings().get(0);
		metingEJB.berekenGrafiek(meting, experiment);
	}
}
